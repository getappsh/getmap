version: '3.6' #
services:
  # node-app-api:
  #   #image: harbor.getapp.sh/getapp-dev/api:latest
  #   build:
  #     context: .
  #     # args:
  #     #   - SERVICE_NAME=api
  #     dockerfile: Dockerfile-cts
  #   restart: always
  #   env_file:
  #     - .env.dev
  #   networks:
  #     - getapp
  #   ports:
  #     - 3000:3000
  #   command: node apps/api/main.js

  # node-app-upload:
  #   #image: harbor.getapp.sh/getapp-dev/api:latest
  #   build:
  #     context: .
  #     args:
  #       - SERVICE_NAME=upload
  #     dockerfile: Dockerfile.prod
  #   restart: always
  #   env_file:
  #     - .env
  #   volumes:
  #     - //var/run/docker.sock:/var/run/docker.sock
  #   networks:
  #     - getapp
  #   # command: npm run start:dev upload

  # node-app-discovery:
  #   #image: harbor.getapp.sh/getapp-dev/api:latest
  #   build:
  #     context: .
  #     args:
  #       - SERVICE_NAME=discovery
  #     dockerfile: Dockerfile.prod
  #   restart: always
  #   env_file:
  #     - .env.dev
  #   networks:
  #     - getapp
  #   # command: npm run start:dev discovery

  # node-app-offering:
  #   #image: harbor.getapp.sh/getapp-dev/api:latest
  #   build:
  #     context: .
  #     args:
  #       - SERVICE_NAME=offering
  #     dockerfile: Dockerfile.prod
  #   restart: always
  #   env_file:
  #     - .env.dev
  #   networks:
  #     - getapp
  #   # command: npm run start:dev offering

  # node-app-delivery:
  #   #image: harbor.getapp.sh/getapp-dev/api:latest
  #   build:
  #     context: .
  #     args:
  #       - SERVICE_NAME=delivery
  #     dockerfile: Dockerfile.prod
  #   restart: always
  #   env_file:
  #     - .env.dev
  #   networks:
  #     - getapp
  #   # command: npm run start:dev delivery

  # node-app-deploy:
  #   build:
  #     context: .
  #     args:
  #       - SERVICE_NAME=deploy
  #     dockerfile: Dockerfile.prod
  #   restart: always
  #   env_file:
  #     - .env.dev
  #   networks:
  #     - getapp
  #   # command: npm run start:dev deploy
  
  # node-app-project-management:
  #   build:
  #     context: .
  #     args:
  #       - SERVICE_NAME=project-management
  #     dockerfile: Dockerfile.prod
  #   restart: always
  #   env_file:
  #     - .env.dev
  #   networks:
  #     - getapp
  #   # command: npm run start:dev project-management



  db:
    container_name: pg_container
    image: postgres:14.1
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: admin
      POSTGRES_DB: get_app
    ports:
      - 5432:5432
    networks:
      - getapp
    volumes:
      - db:/var/lib/postgresql/data

  # pgadmin:
  #   container_name: pgadmin
  #   image: dpage/pgadmin4
  #   restart: always
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@admin.com
  #     PGADMIN_DEFAULT_PASSWORD: admin
  #   ports:
  #     - 5050:80
  #   networks:
  #     - getapp

  # artifactory:
  #   image: releases-docker.jfrog.io/jfrog/artifactory-oss:latest
  #   container_name: artifactory
  #   ports:
  #    - 8081:8081
  #    - 8082:8082
  #   volumes:
  #    - data-artifactory:/var/opt/jfrog/artifactory
  #   networks:
  #     - getapp

  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   restart: "always"
  #   ports:
  #     - 9001:9000
  #   networks:
  #     - getapp

  #   environment:
  #     KAFKA_BROKERCONNECT: "kafka:29092"
  #     JVM_OPTS: "-Xms16M -Xmx48M -Xss180K -XX:-TieredCompilation -XX:+UseStringDeduplication -noverify"
  #   depends_on:
  #     - "kafka"

  # kafka-ui:
  #   image: provectuslabs/kafka-ui
  #   container_name: kafka-ui
  #   ports:
  #     - "8080:8080"
  #   restart: always
  #   networks:
  #     - getapp
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:29092
  #     DYNAMIC_CONFIG_ENABLED: 'true'

  # kafka:
  #   image: confluentinc/cp-kafka:7.4.1
  #   hostname: kafka
  #   container_name: kafka_container
  #   networks:
  #       - getapp
  #   ports:
  #   - 9092:9092
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT,CONTROLLER:PLAINTEXT
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  #     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
  #     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
  #     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
  #     KAFKA_PROCESS_ROLES: broker,controller
  #     KAFKA_NODE_ID: 1
  #     KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
  #     KAFKA_LISTENERS: PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
  #     KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
  #     CLUSTER_ID: MkU3OEVBNTcwNTJENDM2Qk
  #     KAFKA_NUM_PARTITIONS: "5"


networks:
  getapp:
    driver: bridge
    
volumes:
  db:
    driver: local
  keycloak:
    driver: local
  data-artifactory:
    driver: local
  ignore: